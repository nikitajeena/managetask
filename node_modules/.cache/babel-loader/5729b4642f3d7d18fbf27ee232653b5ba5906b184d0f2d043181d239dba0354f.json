{"ast":null,"code":"var _jsxFileName = \"D:\\\\test\\\\learngraph\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});\n\n// const client = ...\n\nclient.query({\n  query: gql`\n    query {\n      characters(page: 2, filter: { name: \"rick\" }) {\n        info {\n          count\n        }\n        results {\n          name\n        }\n      }\n      location(id: 1) {\n        id\n      }\n      episodesByIds(ids: [1, 2]) {\n        id\n      }\n    }\n    `\n}).then(result => console.log(result));\nroot.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","gql","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","client","uri","cache","query","then","result","console","log","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/test/learngraph/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache(),\n});\n\n// const client = ...\n\nclient\n  .query({\n    query: gql`\n    query {\n      characters(page: 2, filter: { name: \"rick\" }) {\n        info {\n          count\n        }\n        results {\n          name\n        }\n      }\n      location(id: 1) {\n        id\n      }\n      episodesByIds(ids: [1, 2]) {\n        id\n      }\n    }\n    `,\n  })\n  .then((result) => console.log(result));\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,MAAMC,IAAI,GAAGT,QAAQ,CAACU,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjE,MAAMC,MAAM,GAAG,IAAIV,YAAY,CAAC;EAC9BW,GAAG,EAAE,qCAAqC;EAC1CC,KAAK,EAAE,IAAIX,aAAa,CAAC;AAC3B,CAAC,CAAC;;AAEF;;AAEAS,MAAM,CACHG,KAAK,CAAC;EACLA,KAAK,EAAEV,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC,CAAC,CACDW,IAAI,CAAEC,MAAM,IAAKC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC;AAExCT,IAAI,CAACY,MAAM,eACTb,OAAA,CAACH,cAAc;EAACQ,MAAM,EAAEA,MAAO;EAAAS,QAAA,eAC7Bd,OAAA,CAACP,GAAG;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACO,CAClB,CAAC;;AAED;AACA;AACA;AACAxB,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}