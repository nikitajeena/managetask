{"ast":null,"code":"var _jsxFileName = \"D:\\\\test\\\\learngraph\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_LOCATIONS = gql`\n  query Characters {\n    characters {\n      results {\n        episode {\n          characters {\n            id\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n`;\nexport function DisplayQuery() {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOCATIONS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" Loading.....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this);\n  const Char = data.characters.results;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [Char.map(character => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [character.episode.map(episode => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: episode.characters.name\n      }, episode.characters.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)), \"}\"]\n    }, character.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)), \"}\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(DisplayQuery, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = DisplayQuery;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"learning graphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayQuery, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DisplayQuery\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useQuery","gql","jsxDEV","_jsxDEV","Fragment","_Fragment","GET_LOCATIONS","DisplayQuery","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","message","Char","characters","results","map","character","episode","name","id","_c","App","_c2","$RefreshReg$"],"sources":["D:/test/learngraph/src/App.js"],"sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\n\nconst GET_LOCATIONS = gql`\n  query Characters {\n    characters {\n      results {\n        episode {\n          characters {\n            id\n            name\n            image\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport function DisplayQuery() {\n  const { loading, error, data } = useQuery(GET_LOCATIONS);\n  if (loading) return <p> Loading.....</p>;\n  if (error) return <p> Error: {error.message}</p>;\n\n  const Char = data.characters.results;\n\n  return (\n    <div>\n      {Char.map((character) => (\n      <div key={character.id}>\n        {character.episode.map((episode) => (\n          <div key={episode.characters.id}>{episode.characters.name}</div>\n        ))}}\n    </div>\n            ))}}\n\n</div>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      {\" \"}\n      <h1>learning graphQL</h1>\n      <DisplayQuery />{\" \"}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,aAAa,GAAGL,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,SAASM,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGX,QAAQ,CAACM,aAAa,CAAC;EACxD,IAAIG,OAAO,EAAE,oBAAON,OAAA;IAAAS,QAAA,EAAG;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACxC,IAAIN,KAAK,EAAE,oBAAOP,OAAA;IAAAS,QAAA,GAAG,UAAQ,EAACF,KAAK,CAACO,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAEhD,MAAME,IAAI,GAAGP,IAAI,CAACQ,UAAU,CAACC,OAAO;EAEpC,oBACEjB,OAAA;IAAAS,QAAA,GACGM,IAAI,CAACG,GAAG,CAAEC,SAAS,iBACpBnB,OAAA;MAAAS,QAAA,GACGU,SAAS,CAACC,OAAO,CAACF,GAAG,CAAEE,OAAO,iBAC7BpB,OAAA;QAAAS,QAAA,EAAkCW,OAAO,CAACJ,UAAU,CAACK;MAAI,GAA/CD,OAAO,CAACJ,UAAU,CAACM,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgC,CAChE,CAAC,EAAC,GACP;IAAA,GAJYM,SAAS,CAACG,EAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAInB,CACI,CAAC,EAAC,GAEf;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEN;AAACR,EAAA,CAnBeD,YAAY;EAAA,QACOP,QAAQ;AAAA;AAAA0B,EAAA,GAD3BnB,YAAY;AAqB5B,SAASoB,GAAGA,CAAA,EAAG;EACb,oBACExB,OAAA,CAAAE,SAAA;IAAAO,QAAA,GACG,GAAG,eACJT,OAAA;MAAAS,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBb,OAAA,CAACI,YAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC,GAAG;EAAA,eACpB,CAAC;AAEP;AAACY,GAAA,GARQD,GAAG;AAUZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}