{"ast":null,"code":"var _jsxFileName = \"D:\\\\test\\\\learngraph\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_LOCATIONS = gql`\n  query Characters {\n    characters {\n      results {\n        episode {\n          characters {\n            id\n            image\n          }\n        }\n      }\n    }\n  }\n`;\nfunction DisplayLocations() {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_LOCATIONS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this);\n\n  // Extract the characters data\n  const charactersData = data.characters.results;\n\n  // Create an array to store all character images\n  const allImages = [];\n\n  // Iterate through characters and episodes to collect all images\n  charactersData.forEach(character => {\n    character.episode.characters.forEach(char => {\n      allImages.push(char.image);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: `Character ${index + 1}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(DisplayLocations, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = DisplayLocations;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayLocations, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DisplayLocations\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useQuery","gql","jsxDEV","_jsxDEV","GET_LOCATIONS","DisplayLocations","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","message","charactersData","characters","results","allImages","forEach","character","episode","char","push","image","map","index","src","alt","_c","App","_c2","$RefreshReg$"],"sources":["D:/test/learngraph/src/App.js"],"sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\n\nconst GET_LOCATIONS = gql`\n  query Characters {\n    characters {\n      results {\n        episode {\n          characters {\n            id\n            image\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction DisplayLocations() {\n  const { loading, error, data } = useQuery(GET_LOCATIONS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  // Extract the characters data\n  const charactersData = data.characters.results;\n\n  // Create an array to store all character images\n  const allImages = [];\n\n  // Iterate through characters and episodes to collect all images\n  charactersData.forEach((character) => {\n    character.episode.characters.forEach((char) => {\n      allImages.push(char.image);\n    });\n  });\n\n  return (\n    <div>\n      {allImages.map((image, index) => (\n        <img key={index} src={image} alt={`Character ${index + 1}`} />\n      ))}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <h2>My first Apollo app ðŸš€</h2>\n      <br />\n      <DisplayLocations />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,aAAa,GAAGH,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASI,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAACI,aAAa,CAAC;EAExD,IAAIG,OAAO,EAAE,oBAAOJ,OAAA;IAAAO,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,IAAIN,KAAK,EAAE,oBAAOL,OAAA;IAAAO,QAAA,GAAG,SAAO,EAACF,KAAK,CAACO,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;;EAE/C;EACA,MAAME,cAAc,GAAGP,IAAI,CAACQ,UAAU,CAACC,OAAO;;EAE9C;EACA,MAAMC,SAAS,GAAG,EAAE;;EAEpB;EACAH,cAAc,CAACI,OAAO,CAAEC,SAAS,IAAK;IACpCA,SAAS,CAACC,OAAO,CAACL,UAAU,CAACG,OAAO,CAAEG,IAAI,IAAK;MAC7CJ,SAAS,CAACK,IAAI,CAACD,IAAI,CAACE,KAAK,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,oBACEtB,OAAA;IAAAO,QAAA,EACGS,SAAS,CAACO,GAAG,CAAC,CAACD,KAAK,EAAEE,KAAK,kBAC1BxB,OAAA;MAAiByB,GAAG,EAAEH,KAAM;MAACI,GAAG,EAAG,aAAYF,KAAK,GAAG,CAAE;IAAE,GAAjDA,KAAK;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA8C,CAC9D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACR,EAAA,CA1BQD,gBAAgB;EAAA,QACUL,QAAQ;AAAA;AAAA8B,EAAA,GADlCzB,gBAAgB;AA4BzB,eAAe,SAAS0B,GAAGA,CAAA,EAAG;EAC5B,oBACE5B,OAAA;IAAAO,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BX,OAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNX,OAAA,CAACE,gBAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV;AAACkB,GAAA,GARuBD,GAAG;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}